name: CI Essential - Fast Feedback Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  CACHE_KEY_PREFIX: v1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-gate:
    name: Quality Gate - Essential Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_KEY_PREFIX }}-pip-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Pre-commit checks
        run: |
          echo "🔍 Running pre-commit hooks..."
          pre-commit run --all-files
        continue-on-error: false

      - name: Code quality checks
        run: |
          echo "📊 Running code quality analysis..."
          
          # Security scanning with bandit
          echo "🔒 Security scan..."
          bandit -r adri/ -f json -o bandit-report.json || true
          
          # Type checking with mypy (non-blocking for now)
          echo "🔍 Type checking..."
          mypy adri/ --ignore-missing-imports || echo "⚠️ Type checking found issues (non-blocking)"
          
          echo "✅ Code quality checks completed"

      - name: Fast test suite
        run: |
          echo "🧪 Running core test suite..."
          
          # Run smoke tests first (fastest)
          pytest tests/examples/smoke_tests/ -v --tb=short
          
          # Run demo validation tests
          pytest tests/demo_validation/ -v --tb=short
          
          # Run unit tests (excluding slow integration tests)
          pytest tests/ -v --tb=short -m "not slow" --maxfail=5
          
          echo "✅ Fast test suite completed"

      - name: Build verification
        run: |
          echo "📦 Verifying package build..."
          python -m pip install build
          python -m build
          
          # Verify the built package can be installed
          pip install dist/*.whl
          
          # Basic import test
          python -c "import adri; print(f'✅ ADRI v{adri.__version__} imported successfully')"
          
          echo "✅ Build verification completed"

  # Parallel job for documentation
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: ./docs

      - name: Test Jekyll build
        run: |
          cd docs
          echo "🏗️ Testing Jekyll documentation build..."
          bundle exec jekyll build --baseurl "/adri" --destination _site_test
          
          # Verify key files exist
          if [ ! -f "_site_test/index.html" ]; then
            echo "❌ index.html not generated"
            exit 1
          fi
          
          echo "✅ Documentation builds successfully"
          rm -rf _site_test

  # Parallel job for security basics
  security-basics:
    name: Security Basics
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Dependency security scan
        run: |
          echo "🔒 Scanning dependencies for vulnerabilities..."
          
          # Check for known vulnerabilities
          safety check --json --output safety-report.json || true
          
          # Audit pip packages
          pip-audit --format=json --output=audit-report.json || true
          
          echo "✅ Security scan completed (reports generated)"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            audit-report.json
            bandit-report.json
          retention-days: 30

  # Summary job that requires all others to pass
  ci-success:
    name: ✅ CI Essential Complete
    if: always()
    needs: [quality-gate, docs-check, security-basics]
    runs-on: ubuntu-latest
    timeout-minutes: 2
    
    steps:
      - name: Check all jobs status
        run: |
          echo "📊 CI Essential Pipeline Results:"
          echo "Quality Gate: ${{ needs.quality-gate.result }}"
          echo "Docs Check: ${{ needs.docs-check.result }}"
          echo "Security Basics: ${{ needs.security-basics.result }}"
          
          if [[ "${{ needs.quality-gate.result }}" != "success" || 
                "${{ needs.docs-check.result }}" != "success" || 
                "${{ needs.security-basics.result }}" != "success" ]]; then
            echo "❌ CI Essential pipeline failed"
            exit 1
          fi
          
          echo "✅ All essential checks passed!"

      - name: Post results comment (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 CI Essential Pipeline')
            );
            
            const body = `🚀 **CI Essential Pipeline Complete**
            
            ✅ Quality Gate: Code formatting, linting, and core tests passed
            ✅ Documentation: Jekyll build successful
            ✅ Security: Basic vulnerability scanning completed
            
            **Next Steps:**
            - Comprehensive testing will run on merge to main
            - Performance benchmarks available in separate workflow
            
            *This fast feedback loop completed in under 15 minutes*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
