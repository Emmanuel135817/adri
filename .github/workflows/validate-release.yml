name: Validate Release Process

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test (e.g., 0.1.0)'
        required: true
        type: string
  pull_request:
    branches: [ main ]
    paths:
      - 'development/tools/scripts/release/update_version_tracking.py'
      - 'pyproject.toml'

jobs:
  validate-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout ADRI repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest coverage

    - name: Validate repository structure
      run: |
        echo "🔍 Validating repository structure..."

        # Check required files exist
        required_files=(
          "pyproject.toml"
          "development/tools/scripts/release/update_version_tracking.py"
          "adri/standards/bundled"
        )

        for file in "${required_files[@]}"; do
          if [ ! -e "$file" ]; then
            echo "❌ Missing required file/directory: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done

        # Check bundled standards are present
        bundled_count=$(find adri/standards/bundled -name "*.yaml" | wc -l)
        if [ "$bundled_count" -gt 0 ]; then
          echo "✅ Found $bundled_count bundled standards files"
        else
          echo "❌ No bundled standards found"
          exit 1
        fi

    - name: Test version tracking script (dry run)
      run: |
        echo "🧪 Testing version tracking script..."

        # Test with current version or provided version
        if [ -n "${{ github.event.inputs.version }}" ]; then
          # Update pyproject.toml with test version temporarily
          sed -i 's/version = "[^"]*"/version = "${{ github.event.inputs.version }}"/' pyproject.toml
        fi

        # Create temporary directory for local tracking test
        mkdir -p /tmp/release-tracking

        # Run the script to test it works (with local tracking)
        python development/tools/scripts/release/update_version_tracking.py \
          --validator-repo . \
          --output-dir /tmp/release-tracking \
          --release-type "Test" \
          --description "Validation test run" "Testing release process"

        echo "✅ Version tracking script executed successfully"

    - name: Validate generated files
      run: |
        echo "📋 Validating generated files..."

        # Check JSON file was created/updated in temp directory
        if [ -f "/tmp/release-tracking/ADRI_VALIDATOR_RELEASES.json" ]; then
          echo "✅ JSON tracking file exists"
          # Validate JSON format
          python -c "import json; json.load(open('/tmp/release-tracking/ADRI_VALIDATOR_RELEASES.json'))"
          echo "✅ JSON file is valid"
        else
          echo "❌ JSON tracking file not found"
          exit 1
        fi

        # Check Markdown file was created/updated in temp directory
        if [ -f "/tmp/release-tracking/ADRI-Validator-Releases.md" ]; then
          echo "✅ Markdown tracking file exists"
        else
          echo "❌ Markdown tracking file not found"
          exit 1
        fi

    - name: Test tag existence check
      run: |
        echo "🏷️  Testing tag existence check..."

        # Create a test tag
        git tag "test-tag-validation"

        # Test the tag check logic from the workflow
        if git rev-parse "test-tag-validation" >/dev/null 2>&1; then
          echo "✅ Tag existence check works correctly"
        else
          echo "❌ Tag existence check failed"
          exit 1
        fi

        # Clean up test tag
        git tag -d "test-tag-validation"

    - name: Run comprehensive tests
      run: |
        echo "🧪 Running comprehensive test suite..."
        python -m pytest tests/ -v --tb=short
        echo "✅ All tests passed"

    - name: Validate workflow syntax
      run: |
        echo "📝 Validating workflow files..."

        # Check YAML syntax of workflow files
        python -c "
        import yaml
        import sys

        workflows = [
          '.github/workflows/validate-release.yml'
        ]

        for workflow in workflows:
          try:
            with open(workflow, 'r') as f:
              yaml.safe_load(f)
            print(f'✅ {workflow} is valid YAML')
          except Exception as e:
            print(f'❌ {workflow} has invalid YAML: {e}')
            sys.exit(1)
        "

    - name: Summary
      run: |
        echo "🎉 Release validation completed successfully!"
        echo ""
        echo "✅ Repository structure validated"
        echo "✅ Self-contained standards validated"
        echo "✅ Version tracking script tested"
        echo "✅ Generated files validated"
        echo "✅ Tag existence check tested"
        echo "✅ Comprehensive tests passed"
        echo "✅ Workflow syntax validated"
        echo ""
        echo "🚀 The release process is ready to go!"
