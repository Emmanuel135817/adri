name: Branch Naming Validation

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  validate-branch-name:
    runs-on: ubuntu-latest
    name: Validate branch naming convention

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **

      - name: Determine enforcement level
        id: enforcement
        uses: actions/github-script@v7
        with:
          script: |
            const changedFiles = `${{ steps.changed-files.outputs.all_changed_files }}`.split(' ').filter(f => f.length > 0);
            
            // High-risk paths requiring full enforcement
            const highRiskPaths = [
              'adri/core/',
              'adri/decorators/',
              'adri/standards/',
              'setup.py',
              'pyproject.toml'
            ];
            
            // Medium-risk paths with guided enforcement
            const mediumRiskPaths = [
              'adri/cli/',
              'adri/config/',
              'adri/analysis/',
              'tests/'
            ];
            
            // Check if any high-risk files changed
            const hasHighRisk = changedFiles.some(file => 
              highRiskPaths.some(path => file.startsWith(path))
            );
            
            // Check if any medium-risk files changed
            const hasMediumRisk = changedFiles.some(file => 
              mediumRiskPaths.some(path => file.startsWith(path))
            );
            
            let enforcementLevel = 'low';
            if (hasHighRisk) {
              enforcementLevel = 'high';
            } else if (hasMediumRisk) {
              enforcementLevel = 'medium';
            }
            
            core.setOutput('level', enforcementLevel);
            core.setOutput('changed_files', changedFiles.join(', '));
            console.log(`🎯 Enforcement level: ${enforcementLevel}`);
            console.log(`📁 Changed files: ${changedFiles.join(', ')}`);

      - name: Check branch name format
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            const enforcementLevel = '${{ steps.enforcement.outputs.level }}';
            const changedFiles = '${{ steps.enforcement.outputs.changed_files }}';
            
            // Valid branch name patterns
            const validPatterns = [
              /^feat\/issue-\d+-[\w-]+$/,
              /^fix\/issue-\d+-[\w-]+$/,
              /^docs\/issue-\d+-[\w-]+$/,
              /^chore\/issue-\d+-[\w-]+$/,
              /^refactor\/issue-\d+-[\w-]+$/,
              /^test\/issue-\d+-[\w-]+$/,
              /^style\/issue-\d+-[\w-]+$/,
              /^perf\/issue-\d+-[\w-]+$/,
              /^enhance\/issue-\d+-[\w-]+$/,
              /^hotfix\/issue-\d+-[\w-]+$/
            ];
            
            // Special exceptions for main development branches
            const exceptions = ['main', 'master', 'develop', 'dev'];
            
            if (exceptions.includes(branchName)) {
              console.log(`✅ Branch '${branchName}' is a main development branch, skipping validation.`);
              return;
            }
            
            // Check if branch name matches any valid pattern
            const isValid = validPatterns.some(pattern => pattern.test(branchName));
            
            if (!isValid) {
              const exampleMessage = `
            **Required format:** \`type/issue-{number}-brief-description\`
            
            **Valid types:** feat, fix, docs, chore, refactor, test, style, perf, enhance, hotfix
            
            **Examples:**
            - \`feat/issue-123-user-authentication\`
            - \`fix/issue-456-memory-leak\`
            - \`docs/issue-789-api-documentation\`
            - \`enhance/issue-321-performance-improvement\`
            
            **To fix this:**
            1. Rename your branch using: \`git branch -m new-branch-name\`
            2. Push the renamed branch: \`git push origin new-branch-name\`
            3. Update this PR to use the new branch
              `;
              
              if (enforcementLevel === 'high') {
                core.setFailed(`❌ **High-risk changes require proper branch naming!**
                
                **Current branch:** \`${branchName}\`
                **Changed files:** ${changedFiles}
                
                Core ADRI functionality changes must follow our naming convention for proper tracking and quality assurance.
                
                ${exampleMessage}
                
                **Why?** Standardized branch names help maintain project organization and enable automated workflows.`);
                return;
              } else if (enforcementLevel === 'medium') {
                console.log(`⚠️ **Branch naming suggestion**: Consider using our standard naming convention.
                
                **Current branch:** \`${branchName}\`
                **Changed files:** ${changedFiles}
                
                ${exampleMessage}
                
                **Why?** Standard branch names improve project organization and enable better collaboration.`);
                // Don't fail for medium risk, just suggest
              } else {
                console.log(`💡 **Branch naming tip**: For future PRs, consider our naming convention for better organization.
                
                **Current branch:** \`${branchName}\`
                **Changed files:** ${changedFiles}
                
                Documentation and example updates are welcome with any branch name! 
                For larger contributions, our naming convention helps with project tracking.`);
                // Don't fail for low risk
              }
            } else {
              // Extract issue number from branch name if valid
              const issueMatch = branchName.match(/issue-(\d+)/);
              if (issueMatch) {
                const issueNumber = issueMatch[1];
                console.log(`✅ Branch name follows convention: ${branchName}`);
                console.log(`📋 Extracted issue number: #${issueNumber}`);
                
                // Verify the issue exists (only fail for high-risk)
                const { owner, repo } = context.repo;
                try {
                  const { data: issue } = await github.rest.issues.get({
                    owner,
                    repo,
                    issue_number: parseInt(issueNumber)
                  });
                  console.log(`✅ Confirmed issue #${issueNumber} exists: "${issue.title}"`);
                } catch (error) {
                  if (enforcementLevel === 'high') {
                    core.setFailed(`❌ Issue #${issueNumber} referenced in branch name does not exist.`);
                    return;
                  } else {
                    console.log(`⚠️ Issue #${issueNumber} referenced in branch name does not exist. Please verify the issue number.`);
                  }
                }
              }
              
              console.log(`✅ Branch naming validation completed. Enforcement level: ${enforcementLevel}`);
            }

      - name: Add success comment
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.payload.pull_request.number;
            const branchName = context.payload.pull_request.head.ref;
            
            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: pr_number
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('✅ Branch naming validation passed')
            );
            
            if (!botComment) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body: `✅ **Branch naming validation passed!** Branch \`${branchName}\` follows the required naming convention.`
              });
            }
