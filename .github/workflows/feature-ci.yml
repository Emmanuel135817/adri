name: Feature Branch CI

on:
  push:
    branches: 
      - 'feature/**'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.11", "3.12"]  # Reduced matrix for faster feedback

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        flake8 adri --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 adri --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check adri tests
    
    - name: Check import sorting with isort
      run: |
        isort --check-only adri tests
    
    - name: Run unit tests with coverage
      run: |
        pytest tests/unit/ -v --cov=adri --cov-report=xml --cov-report=term-missing --cov-fail-under=90
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: feature-tests
        name: feature-branch-coverage

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety pip-audit
    
    - name: Run security checks with bandit
      run: |
        bandit -r adri -f json -o bandit-report.json || true
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-feature
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

  pr-comment:
    if: github.event_name == 'pull_request'
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
    - name: Comment PR
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'âœ… Feature branch CI passed! Ready for review.\n\n- All tests passing\n- Code quality checks passed\n- Security scans completed\n- Coverage requirements met'
          })
