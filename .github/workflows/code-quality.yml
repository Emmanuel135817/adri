name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pylint
        pip install types-PyYAML types-click types-setuptools
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .

    - name: Check code formatting with Black
      run: |
        echo "🎨 Checking code formatting with Black..."
        black --check --diff adri/ tests/ || {
          echo "❌ Code formatting issues found. Run 'black adri/ tests/' to fix."
          exit 1
        }
        echo "✅ Code formatting is correct"

    - name: Check import sorting with isort
      run: |
        echo "📦 Checking import sorting with isort..."
        isort --check-only --diff adri/ tests/ || {
          echo "❌ Import sorting issues found. Run 'isort adri/ tests/' to fix."
          exit 1
        }
        echo "✅ Import sorting is correct"

    - name: Run flake8 linting
      run: |
        echo "🔍 Running flake8 linting..."
        flake8 adri/ tests/ --statistics --tee --output-file=flake8-report.txt || {
          echo "❌ Linting issues found. Please fix the issues above."
          echo "Flake8 failed" > flake8-report.txt
          exit 1
        }
        echo "✅ No linting issues found"

    - name: Run mypy type checking
      run: |
        echo "🔬 Running mypy type checking..."
        mypy adri/ --ignore-missing-imports --show-error-codes --pretty || {
          echo "❌ Type checking issues found. Please fix the type issues above."
          exit 1
        }
        echo "✅ Type checking passed"

    - name: Run pylint analysis
      run: |
        echo "🔎 Running pylint analysis..."
        pylint adri/ --output-format=text --reports=yes --score=yes > pylint-report.txt || true
        PYLINT_SCORE=$(tail -2 pylint-report.txt | grep "Your code has been rated" | awk '{print $7}' | cut -d'/' -f1)
        echo "Pylint score: $PYLINT_SCORE/10"

        # Fail if score is below 8.0
        if (( $(echo "$PYLINT_SCORE < 8.0" | bc -l) )); then
          echo "❌ Pylint score too low: $PYLINT_SCORE/10 (minimum: 8.0)"
          cat pylint-report.txt
          exit 1
        else
          echo "✅ Pylint score acceptable: $PYLINT_SCORE/10"
        fi
      continue-on-error: false

    - name: Upload Quality Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          flake8-report.txt
          pylint-report.txt

    - name: Code Quality Summary
      if: always()
      run: |
        echo "## 🎨 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "### Formatting & Style" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Black formatting: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ isort import sorting: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ flake8 linting: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ mypy type checking: Passed" >> $GITHUB_STEP_SUMMARY

        if [ -f pylint-report.txt ]; then
          PYLINT_SCORE=$(tail -2 pylint-report.txt | grep "Your code has been rated" | awk '{print $7}' | cut -d'/' -f1 2>/dev/null || echo "N/A")
          echo "- ✅ pylint analysis: $PYLINT_SCORE/10" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quality Standards Met" >> $GITHUB_STEP_SUMMARY
        echo "- Code follows PEP 8 style guidelines" >> $GITHUB_STEP_SUMMARY
        echo "- Imports are properly sorted and organized" >> $GITHUB_STEP_SUMMARY
        echo "- Type hints are consistent and valid" >> $GITHUB_STEP_SUMMARY
        echo "- Code quality score meets minimum standards" >> $GITHUB_STEP_SUMMARY

  auto-format:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.head_ref }}
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort

    - name: Auto-format code
      run: |
        echo "🎨 Auto-formatting code with Black..."
        black adri/ tests/

        echo "📦 Auto-sorting imports with isort..."
        isort adri/ tests/

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - Auto Format"
        git add -A
        git commit -m "Auto-format: Apply Black and isort formatting

        - Applied Black code formatting
        - Sorted imports with isort
        - Automated by GitHub Actions"
        git push
