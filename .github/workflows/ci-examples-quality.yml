name: CI Examples - Quality Checks (Non-Blocking)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 4 * * *'  # Daily at 4 AM UTC (after core tests)
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  CACHE_KEY_PREFIX: v2

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  # Can cancel quality checks

jobs:
  examples-integration-tests:
    name: Framework Examples Integration
    runs-on: ubuntu-latest
    timeout-minutes: 30
    continue-on-error: true  # Don't block on example failures

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Framework integration tests (mock mode)
        run: |
          echo "🔗 Running framework integration tests (examples quality)..."
          echo "⚠️ These tests provide warnings only - do not block main branch"

          # Test framework examples with mocks (no API costs)
          pytest tests/examples/integration_tests/ \
            -v \
            --tb=short \
            -m "not requires_api_key" \
            --maxfail=10 \
            --continue-on-collection-errors

          echo "✅ Framework integration tests completed (quality feedback)"

  examples-dependency-validation:
    name: Dependency Error Handling Quality
    runs-on: ubuntu-latest
    timeout-minutes: 20
    continue-on-error: true  # Don't block on dependency handling failures

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Dependency validation quality checks
        run: |
          echo "📦 Running dependency validation quality checks..."
          echo "⚠️ These provide quality metrics - do not block main branch"

          # Test dependency error handling patterns
          pytest tests/examples/dependency_tests/ \
            -v \
            --tb=short \
            --maxfail=10 \
            --continue-on-collection-errors

          echo "✅ Dependency validation quality checks completed"

  demo-credibility-checks:
    name: Demo Quality & Credibility
    runs-on: ubuntu-latest
    timeout-minutes: 25
    continue-on-error: true  # Don't block on demo quality issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Demo quality validation
        run: |
          echo "📋 Running demo quality and credibility checks..."
          echo "⚠️ These provide quality feedback - do not block main branch"

          # Test demo credibility and first impression
          pytest tests/demo_validation/ \
            -v \
            --tb=short \
            --maxfail=10 \
            --continue-on-collection-errors

          echo "✅ Demo quality checks completed (feedback only)"

  # Summary job - NON-BLOCKING (warnings only)
  examples-quality-summary:
    name: ⚠️ Examples Quality Summary
    if: always()
    needs: [examples-integration-tests, examples-dependency-validation, demo-credibility-checks]
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Check examples quality status
        run: |
          echo "📊 EXAMPLES QUALITY Pipeline Results (NON-BLOCKING):"
          echo "Framework Integration: ${{ needs.examples-integration-tests.result }}"
          echo "Dependency Validation: ${{ needs.examples-dependency-validation.result }}"
          echo "Demo Credibility: ${{ needs.demo-credibility-checks.result }}"

          # Count issues for reporting
          ISSUES=0
          if [[ "${{ needs.examples-integration-tests.result }}" == "failure" ]]; then
            echo "⚠️ Framework integration tests have issues"
            ISSUES=$((ISSUES + 1))
          fi
          
          if [[ "${{ needs.examples-dependency-validation.result }}" == "failure" ]]; then
            echo "⚠️ Dependency validation tests have issues"
            ISSUES=$((ISSUES + 1))
          fi
          
          if [[ "${{ needs.demo-credibility-checks.result }}" == "failure" ]]; then
            echo "⚠️ Demo credibility tests have issues"
            ISSUES=$((ISSUES + 1))
          fi

          echo ""
          if [[ $ISSUES -eq 0 ]]; then
            echo "✅ All example quality checks passed!"
          else
            echo "⚠️ $ISSUES quality issues found - investigate when convenient"
            echo "🔄 Main branch development NOT BLOCKED by these issues"
          fi

          echo "✅ Examples quality pipeline completed (non-blocking)"

      - name: Generate examples quality report
        run: |
          echo "📋 **EXAMPLES QUALITY Summary (NON-BLOCKING)**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Framework Integration | ${{ needs.examples-integration-tests.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Validation | ${{ needs.examples-dependency-validation.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Demo Credibility | ${{ needs.demo-credibility-checks.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🟡 EXAMPLES testing completed - quality feedback provided**" >> $GITHUB_STEP_SUMMARY
          echo "*⚠️ Note: These checks do not block main branch development*" >> $GITHUB_STEP_SUMMARY
          echo "*Examples CI completed at $(date)*" >> $GITHUB_STEP_SUMMARY
