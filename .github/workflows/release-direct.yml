name: Direct Release to PyPI (Skip TestPyPI)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.1)'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Set version environment variable
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "ADRI_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Setting ADRI_VERSION to: $VERSION"

    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=adri --cov-report=xml --cov-fail-under=90
      env:
        ADRI_VERSION: ${{ env.ADRI_VERSION }}

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Verify version matches input
      run: |
        INPUT_VERSION="${{ github.event.inputs.version }}"
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | head -1 | cut -d'"' -f2)
        echo "Input version: $INPUT_VERSION"
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        if [ "$INPUT_VERSION" != "$PYPROJECT_VERSION" ]; then
          echo "‚ùå Version mismatch! Input: $INPUT_VERSION, pyproject.toml: $PYPROJECT_VERSION"
          exit 1
        fi
        echo "‚úÖ Version verification passed"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Production PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  smoke-test-production:
    needs: publish-pypi
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Production PyPI Smoke Tests
      run: |
        echo "üß™ Running Production PyPI smoke tests..."

        # Wait for PyPI propagation
        echo "‚è≥ Waiting for PyPI propagation..."
        sleep 60

        # Create clean test environment
        cd /tmp
        python -m venv production_env
        source production_env/bin/activate

        # Install from production PyPI
        echo "üì¶ Installing from Production PyPI..."
        pip install adri==${{ github.event.inputs.version }}

        # Run comprehensive tests
        echo "‚úÖ Running comprehensive tests..."
        python -c "
        import time
        import pandas as pd
        from adri import adri_protected
        import adri

        # Version check
        print(f'‚úÖ Version: {adri.__version__}')
        assert adri.__version__ == '${{ github.event.inputs.version }}'

        # Performance check
        @adri_protected()
        def perf_test(data):
            return data.shape[0]

        df = pd.DataFrame({'test': range(1000)})
        start = time.time()
        result = perf_test(df)
        duration = time.time() - start

        print(f'‚úÖ Performance check: {duration:.2f}s')
        assert duration < 10.0, f'Performance regression: {duration}s'
        assert result == 1000

        print('üéâ All production smoke tests passed!')
        "

    - name: Notify on Success
      if: success()
      run: |
        echo "üéâ Direct release v${{ github.event.inputs.version }} completed successfully!"
        echo "üì¶ Package available at: https://pypi.org/project/adri/${{ github.event.inputs.version }}/"
