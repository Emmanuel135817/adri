name: Release Pipeline (TestPyPI ‚Üí PyPI)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Set version environment variable
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "ADRI_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Setting ADRI_VERSION to: $VERSION"

    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=adri --cov-report=xml --cov-fail-under=90
      env:
        ADRI_VERSION: ${{ env.ADRI_VERSION }}

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Verify version matches input
      run: |
        INPUT_VERSION="${{ github.event.inputs.version }}"
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | head -1 | cut -d'"' -f2)
        echo "Input version: $INPUT_VERSION"
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        if [ "$INPUT_VERSION" != "$PYPROJECT_VERSION" ]; then
          echo "‚ùå Version mismatch! Input: $INPUT_VERSION, pyproject.toml: $PYPROJECT_VERSION"
          exit 1
        fi
        echo "‚úÖ Version verification passed"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: Publish to TestPyPI
      run: |
        twine upload --repository testpypi dist/* --verbose
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TESTPYPI }}

  smoke-test-testpypi:
    needs: publish-testpypi
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: TestPyPI Smoke Tests
      run: |
        echo "üß™ Running TestPyPI smoke tests..."

        # Wait for TestPyPI propagation
        echo "‚è≥ Waiting for TestPyPI propagation..."
        sleep 60

        # Create clean test environment
        cd /tmp
        python -m venv testpypi_env
        source testpypi_env/bin/activate

        # Install from TestPyPI
        echo "üì¶ Installing from TestPyPI..."
        pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ adri==${{ github.event.inputs.version }}

        # Run comprehensive tests
        echo "‚úÖ Running comprehensive tests..."
        python -c "
        import time
        import pandas as pd
        from adri import adri_protected
        import adri

        # Version check
        print(f'‚úÖ Version: {adri.__version__}')
        assert adri.__version__ == '${{ github.event.inputs.version }}'

        # Performance check
        @adri_protected()
        def perf_test(data):
            return data.shape[0]

        df = pd.DataFrame({'test': range(1000)})
        start = time.time()
        result = perf_test(df)
        duration = time.time() - start

        print(f'‚úÖ Performance check: {duration:.2f}s')
        assert duration < 10.0, f'Performance regression: {duration}s'
        assert result == 1000

        print('üéâ All TestPyPI smoke tests passed!')
        "

  publish-pypi:
    needs: smoke-test-testpypi
    runs-on: ubuntu-latest
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: Publish to Production PyPI
      run: |
        twine upload dist/* --verbose
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI }}

  smoke-test-pypi:
    needs: publish-pypi
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Production PyPI Smoke Tests
      run: |
        echo "üß™ Running Production PyPI smoke tests..."

        # Wait for PyPI propagation
        echo "‚è≥ Waiting for PyPI propagation..."
        sleep 60

        # Create clean test environment
        cd /tmp
        python -m venv production_env
        source production_env/bin/activate

        # Install from production PyPI
        echo "üì¶ Installing from Production PyPI..."
        pip install adri==${{ github.event.inputs.version }}

        # Run comprehensive tests
        echo "‚úÖ Running comprehensive tests..."
        python -c "
        import time
        import pandas as pd
        from adri import adri_protected
        import adri

        # Version check
        print(f'‚úÖ Version: {adri.__version__}')
        assert adri.__version__ == '${{ github.event.inputs.version }}'

        # Performance check
        @adri_protected()
        def perf_test(data):
            return data.shape[0]

        df = pd.DataFrame({'test': range(1000)})
        start = time.time()
        result = perf_test(df)
        duration = time.time() - start

        print(f'‚úÖ Performance check: {duration:.2f}s')
        assert duration < 10.0, f'Performance regression: {duration}s'
        assert result == 1000

        print('üéâ All production smoke tests passed!')
        "

  create-release:
    needs: smoke-test-pypi
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Create Git Tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a v${{ github.event.inputs.version }} -m "Release v${{ github.event.inputs.version }}"
        git push origin v${{ github.event.inputs.version }}

    - name: Create GitHub Release
      run: |
        gh release create v${{ github.event.inputs.version }} \
          --title "Release v${{ github.event.inputs.version }}" \
          --notes "üéâ **Release v${{ github.event.inputs.version }}**

        ## ‚úÖ **Validation Complete**
        - Tests passed on GitHub Actions
        - Package validated on TestPyPI
        - Package published to PyPI
        - Smoke tests passed on both platforms

        ## üì¶ **Installation**
        \`\`\`bash
        pip install adri==${{ github.event.inputs.version }}
        \`\`\`

        ## üîó **Links**
        - [PyPI Package](https://pypi.org/project/adri/${{ github.event.inputs.version }}/)
        - [Documentation](https://github.com/ThinkEvolveSolve/adri-validator/blob/main/README.md)
        - [Changelog](https://github.com/ThinkEvolveSolve/adri-validator/blob/main/CHANGELOG.md)"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify Success
      run: |
        echo "üéâ Release v${{ github.event.inputs.version }} completed successfully!"
        echo "üì¶ Package available at: https://pypi.org/project/adri/${{ github.event.inputs.version }}/"
        echo "üè∑Ô∏è GitHub release: https://github.com/ThinkEvolveSolve/adri-validator/releases/tag/v${{ github.event.inputs.version }}"

  # Rollback job (only runs on failure)
  rollback:
    if: failure()
    needs: [test, build, publish-testpypi, smoke-test-testpypi, publish-pypi, smoke-test-pypi, create-release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Rollback Actions
      run: |
        echo "üö® Release failed! Initiating rollback procedures..."

        # Note: PyPI doesn't allow deleting packages, so we document the failure
        echo "‚ö†Ô∏è  Note: PyPI packages cannot be automatically deleted."
        echo "üìù Manual cleanup may be required for:"
        echo "   - PyPI package (if published): https://pypi.org/project/adri/${{ github.event.inputs.version }}/"
        echo "   - TestPyPI package (if published): https://test.pypi.org/project/adri/${{ github.event.inputs.version }}/"

        # Clean up any created tags/releases
        if git ls-remote --tags origin | grep -q "v${{ github.event.inputs.version }}"; then
          echo "üóëÔ∏è  Cleaning up Git tag..."
          git push origin --delete v${{ github.event.inputs.version }} || echo "Tag deletion failed or tag doesn't exist"
        fi

        if gh release view v${{ github.event.inputs.version }} >/dev/null 2>&1; then
          echo "üóëÔ∏è  Cleaning up GitHub release..."
          gh release delete v${{ github.event.inputs.version }} --yes || echo "Release deletion failed or release doesn't exist"
        fi

        echo "‚ùå Release v${{ github.event.inputs.version }} failed and rollback completed."
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
