name: Release to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.1)'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Set version environment variable
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "ADRI_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Setting ADRI_VERSION to: $VERSION"

    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=adri --cov-report=xml --cov-fail-under=90
      env:
        ADRI_VERSION: ${{ env.ADRI_VERSION }}

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Verify version matches tag
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
        else
          TAG_VERSION="${{ github.event.inputs.version }}"
        fi
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | head -1 | cut -d'"' -f2)
        echo "Tag version: $TAG_VERSION"
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]; then
          echo "‚ùå Version mismatch! Tag: $TAG_VERSION, pyproject.toml: $PYPROJECT_VERSION"
          exit 1
        fi
        echo "‚úÖ Version verification passed"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TESTPYPI }}
        verbose: true

  smoke-test-testpypi:
    needs: publish-testpypi
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Testing version: $VERSION"

    - name: TestPyPI Smoke Tests
      run: |
        echo "üß™ Running TestPyPI smoke tests..."

        # Create clean test environment
        cd /tmp
        python -m venv testpypi_env
        source testpypi_env/bin/activate

        # Poll for TestPyPI package availability
        echo "‚è≥ Polling TestPyPI for package availability..."
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        MAX_ATTEMPTS=9
        ATTEMPT=1
        PACKAGE_FOUND=false

        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "‚è≥ Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking TestPyPI for adri==$VERSION..."

          if pip index versions adri --index-url https://test.pypi.org/simple/ 2>/dev/null | grep -q "$VERSION"; then
            echo "‚úÖ Package adri==$VERSION found on TestPyPI!"
            PACKAGE_FOUND=true
            break
          fi

          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "‚ùå Timeout: Package adri==$VERSION not available on TestPyPI after 270 seconds"
            exit 1
          fi

          echo "‚è≥ Package not found yet, waiting 30 seconds before retry..."
          sleep 30
          ATTEMPT=$((ATTEMPT + 1))
        done

        # Install from TestPyPI
        echo "üì¶ Installing from TestPyPI..."
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ adri==${{ steps.get_version.outputs.VERSION }}

        # Test basic functionality
        echo "‚úÖ Testing basic functionality..."
        python -c "
        import adri
        from adri import adri_protected
        import pandas as pd

        # Version check
        print(f'Version: {adri.__version__}')
        assert adri.__version__ == '${{ steps.get_version.outputs.VERSION }}'

        # Basic functionality test
        @adri_protected()
        def test_func(data):
            return len(data)

        df = pd.DataFrame({'test': [1,2,3]})
        result = test_func(df)
        print(f'Basic test result: {result}')
        assert result == 3

        print('üéâ TestPyPI smoke tests passed!')
        "

  publish-pypi:
    needs: smoke-test-testpypi
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Production PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  smoke-test-production:
    needs: publish-pypi
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Production PyPI Smoke Tests
      run: |
        echo "üß™ Running Production PyPI smoke tests..."

        # Wait for PyPI propagation
        echo "‚è≥ Waiting for PyPI propagation..."
        sleep 60

        # Create clean test environment
        cd /tmp
        python -m venv production_env
        source production_env/bin/activate

        # Install from production PyPI
        echo "üì¶ Installing from Production PyPI..."
        pip install adri==${{ steps.get_version.outputs.VERSION }}

        # Run comprehensive tests
        echo "‚úÖ Running comprehensive tests..."
        python -c "
        import time
        import pandas as pd
        from adri import adri_protected
        import adri

        # Version check
        print(f'‚úÖ Version: {adri.__version__}')
        assert adri.__version__ == '${{ steps.get_version.outputs.VERSION }}'

        # Performance check
        @adri_protected()
        def perf_test(data):
            return data.shape[0]

        df = pd.DataFrame({'test': range(1000)})
        start = time.time()
        result = perf_test(df)
        duration = time.time() - start

        print(f'‚úÖ Performance check: {duration:.2f}s')
        assert duration < 10.0, f'Performance regression: {duration}s'
        assert result == 1000

        print('üéâ All production smoke tests passed!')
        "

    - name: Update GitHub Release with PyPI links
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        RELEASE_BODY="## Installation

        \`\`\`bash
        pip install adri==$VERSION
        \`\`\`

        ## Links
        - üì¶ [PyPI Package](https://pypi.org/project/adri/$VERSION/)
        - üß™ [TestPyPI Package](https://test.pypi.org/project/adri/$VERSION/)
        - üìã [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)

        ## Verification
        All smoke tests passed ‚úÖ"

        gh release edit v$VERSION --notes "$RELEASE_BODY"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify on Success
      if: success()
      run: |
        echo "üéâ Release v${{ steps.get_version.outputs.VERSION }} completed successfully!"
        echo "üì¶ Package available at: https://pypi.org/project/adri/${{ steps.get_version.outputs.VERSION }}/"

    - name: Create Rollback Instructions on Failure
      if: failure()
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        echo "‚ùå Production smoke tests failed!"
        echo ""
        echo "üîÑ Rollback Instructions:"
        echo "1. Delete the GitHub release: gh release delete v$VERSION"
        echo "2. Delete the git tag: git tag -d v$VERSION && git push origin :refs/tags/v$VERSION"
        echo "3. Contact PyPI support to remove the package if necessary"
        echo ""
        echo "üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
