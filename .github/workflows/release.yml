name: Production Release

on:
  push:
    branches: [ production ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.1)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  version-bump:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install bump2version
      run: pip install bump2version

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version
      id: version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          # Manual version specified
          NEW_VERSION="${{ github.event.inputs.version }}"
          sed -i 's/version = "[^"]*"/version = "'$NEW_VERSION'"/' pyproject.toml
        else
          # Auto-bump based on type
          bump2version ${{ github.event.inputs.release_type }} --current-version $(grep 'version = ' pyproject.toml | cut -d'"' -f2) pyproject.toml
          NEW_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)
        fi
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        git add pyproject.toml
        git commit -m "Bump version to $NEW_VERSION"
        git tag "v$NEW_VERSION"
        git push origin main
        git push origin "v$NEW_VERSION"

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=adri --cov-report=xml --cov-fail-under=90

  build:
    needs: [test, version-bump]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: main  # Ensure we get the latest commit with version bump

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # For trusted publishing
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TESTPYPI }}
        verbose: true

  smoke-test-testpypi:
    needs: publish-testpypi
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main  # Ensure we get the latest commit with version bump

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Get version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(grep '^version = ' pyproject.toml | head -1 | cut -d'"' -f2)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Testing version: $VERSION"

    - name: TestPyPI Smoke Tests
      run: |
        echo "üß™ Running TestPyPI smoke tests..."

        # Create clean test environment in temp directory
        cd /tmp
        python -m venv testpypi_env
        source testpypi_env/bin/activate

        # Wait for TestPyPI propagation
        echo "‚è≥ Waiting for TestPyPI propagation..."
        sleep 90

        # Install from TestPyPI
        echo "üì¶ Installing from TestPyPI..."
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ adri==${{ steps.get_version.outputs.VERSION }}

        # Test 1: Import and version check
        echo "‚úÖ Test 1: Import and version check"
        python -c "import adri; print(f'Version: {adri.__version__}'); assert adri.__version__ == '${{ steps.get_version.outputs.VERSION }}'"

        # Test 2: Core functionality
        echo "‚úÖ Test 2: Core functionality"
        python -c "from adri import adri_protected; print('Decorator available')"

        # Test 3: CLI functionality
        echo "‚úÖ Test 3: CLI functionality"
        adri --version
        adri --help

        # Test 4: Basic workflow
        echo "‚úÖ Test 4: Basic workflow test"
        python -c "
        import pandas as pd
        from adri import adri_protected

        @adri_protected()
        def test_func(data):
            return len(data)

        df = pd.DataFrame({'test': [1,2,3]})
        result = test_func(df)
        print(f'Basic functionality test result: {result}')
        assert result == 3
        "

        echo "üéâ All TestPyPI smoke tests passed!"

    - name: Notify Slack on TestPyPI Failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "‚ùå ADRI v${{ steps.get_version.outputs.VERSION }} TestPyPI Failed\nüõë TestPyPI smoke tests failed\nüìã Release halted automatically\nüîó <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>"
        }' \
        ${{ secrets.SLACK_WEBHOOK_URL }}

  publish-pypi:
    needs: smoke-test-testpypi
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # For trusted publishing
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Production PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  smoke-test-production:
    needs: publish-pypi
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main  # Ensure we get the latest commit with version bump

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Get version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(grep '^version = ' pyproject.toml | head -1 | cut -d'"' -f2)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Production PyPI Smoke Tests
      run: |
        echo "üß™ Running Production PyPI smoke tests..."

        # Wait for PyPI propagation
        echo "‚è≥ Waiting for PyPI propagation..."
        sleep 60

        # Create clean test environment in temp directory
        cd /tmp
        python -m venv production_env
        source production_env/bin/activate

        # Install from production PyPI
        echo "üì¶ Installing from Production PyPI..."
        pip install adri==${{ steps.get_version.outputs.VERSION }}

        # Run full smoke test suite
        echo "‚úÖ Running full smoke test suite..."
        python -c "
        import time
        import pandas as pd
        from adri import adri_protected
        import adri

        # Version check
        print(f'‚úÖ Version: {adri.__version__}')
        assert adri.__version__ == '${{ steps.get_version.outputs.VERSION }}'

        # Performance check
        @adri_protected()
        def perf_test(data):
            return data.shape[0]

        df = pd.DataFrame({'test': range(1000)})
        start = time.time()
        result = perf_test(df)
        duration = time.time() - start

        print(f'‚úÖ Performance check: {duration:.2f}s')
        assert duration < 10.0, f'Performance regression: {duration}s'
        assert result == 1000

        print('üéâ All production smoke tests passed!')
        "

    - name: Create Production Failure Issue
      if: failure()
      run: |
        gh issue create --title "URGENT: Release ${{ steps.get_version.outputs.VERSION }} Failed - Production Smoke Tests" \
          --body "Production smoke tests failed after PyPI publication. Manual intervention required." \
          --label "urgent,rollback-needed,production-failure"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify Slack on Production Failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "‚ùå ADRI v${{ steps.get_version.outputs.VERSION }} Production Failed\nüõë Production smoke tests failed\nüìã Issue created automatically\nüîß Manual intervention required\nüîó <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>"
        }' \
        ${{ secrets.SLACK_WEBHOOK_URL }}

  github-release:
    needs: smoke-test-production
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          awk '/^## \[?'${{ steps.get_version.outputs.VERSION }}'\]?/{flag=1; next} /^## \[?[0-9]/{flag=0} flag' CHANGELOG.md > release_notes.md
        else
          echo "Release ${{ steps.get_version.outputs.VERSION }}" > release_notes.md
          echo "" >> release_notes.md
          echo "See commit history for changes." >> release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release v${{ steps.get_version.outputs.VERSION }}
        body_path: release_notes.md
        files: dist/*
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'rc') || contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'alpha') }}

    - name: Notify Slack on Success
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "üéâ ADRI v${{ steps.get_version.outputs.VERSION }} Released Successfully!\nüì¶ `pip install adri==${{ steps.get_version.outputs.VERSION }}`\nüîó <${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.VERSION }}|View Release>"
        }' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
