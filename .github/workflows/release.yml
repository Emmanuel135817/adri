name: Production Release

on:
  push:
    branches: [ production ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.1)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  version-bump:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install bump2version
      run: pip install bump2version
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Bump version
      id: version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          # Manual version specified
          NEW_VERSION="${{ github.event.inputs.version }}"
          sed -i 's/version = "[^"]*"/version = "'$NEW_VERSION'"/' pyproject.toml
        else
          # Auto-bump based on type
          bump2version ${{ github.event.inputs.release_type }} --current-version $(grep 'version = ' pyproject.toml | cut -d'"' -f2) pyproject.toml
          NEW_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)
        fi
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        git add pyproject.toml
        git commit -m "Bump version to $NEW_VERSION"
        git tag "v$NEW_VERSION"
        git push origin production
        git push origin "v$NEW_VERSION"

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=adri --cov-report=xml --cov-fail-under=90

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # For trusted publishing
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  github-release:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          awk '/^## \[?'${{ steps.get_version.outputs.VERSION }}'\]?/{flag=1; next} /^## \[?[0-9]/{flag=0} flag' CHANGELOG.md > release_notes.md
        else
          echo "Release ${{ steps.get_version.outputs.VERSION }}" > release_notes.md
          echo "" >> release_notes.md
          echo "See commit history for changes." >> release_notes.md
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release v${{ steps.get_version.outputs.VERSION }}
        body_path: release_notes.md
        files: dist/*
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'rc') || contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'alpha') }}
