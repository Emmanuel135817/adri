name: Repository Structure Validation

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  validate-root-structure:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Validate root directory structure
      run: |
        echo "üîç Validating repository root directory structure..."

        # Define allowed root files
        ALLOWED_FILES=(
          ".commitlintrc.json"
          ".flake8"
          ".gitignore"
          ".gitmessage"
          ".pre-commit-config.yaml"
          "adri-config.yaml"
          "ARCHITECTURE.md"
          "CHANGELOG.md"
          "CONTRIBUTING.md"
          "LICENSE"
          "pyproject.toml"
          "README.md"
          "SECURITY.md"
        )

        # Define allowed root directories
        ALLOWED_DIRS=(
          ".git"
          ".github"
          "archive"
          "demos"
          "docs"
          "examples"
          "src"
          "tests"
        )

        # Check for unauthorized files in root (excluding temporary test artifacts)
        echo "üìÅ Checking for unauthorized files in root directory..."
        VIOLATIONS=0

        for file in *; do
          # Skip temporary test artifacts that might be created during parallel CI runs
          if [[ "$file" =~ ^(htmlcov|\.coverage|coverage\.json|\.pytest_cache|\.benchmarks|.*_standard\.yaml|test_logs)$ ]]; then
            echo "‚è≠Ô∏è Skipping temporary artifact: $file"
            continue
          fi
          if [[ -f "$file" ]]; then
            # Check if file is in allowed list
            FOUND=0
            for allowed in "${ALLOWED_FILES[@]}"; do
              if [[ "$file" == "$allowed" ]]; then
                FOUND=1
                break
              fi
            done

            if [[ $FOUND -eq 0 ]]; then
              echo "‚ùå UNAUTHORIZED FILE: $file"
              echo "   Should be moved to appropriate directory:"

              # Suggest proper location based on file type
              case "$file" in
                *.md)
                  if [[ "$file" == *"plan"* || "$file" == *"implementation"* || "$file" == *"guide"* ]]; then
                    echo "   ‚Üí archive/internal-docs/ (internal documentation)"
                  else
                    echo "   ‚Üí docs/ (user documentation)"
                  fi
                  ;;
                *.py)
                  echo "   ‚Üí tests/ (test files) or examples/ (example code)"
                  ;;
                *.json|*.xml|*.report)
                  echo "   ‚Üí Should be in .gitignore (build artifacts)"
                  ;;
                *.yaml|*.yml)
                  if [[ "$file" != "adri-config.yaml" ]]; then
                    echo "   ‚Üí examples/standards/ (data standards) or tests/fixtures/ (test data)"
                  fi
                  ;;
                *)
                  echo "   ‚Üí Check if this file should exist or be gitignored"
                  ;;
              esac
              VIOLATIONS=$((VIOLATIONS + 1))
            fi
          elif [[ -d "$file" ]]; then
            # Check if directory is in allowed list
            FOUND=0
            for allowed in "${ALLOWED_DIRS[@]}"; do
              if [[ "$file" == "$allowed" ]]; then
                FOUND=1
                break
              fi
            done

            if [[ $FOUND -eq 0 ]]; then
              echo "‚ùå UNAUTHORIZED DIRECTORY: $file"
              echo "   Consider if this should be:"
              echo "   ‚Üí Moved inside src/, tests/, docs/, or examples/"
              echo "   ‚Üí Added to .gitignore if it's a build artifact"
              echo "   ‚Üí Archived if it's legacy/internal content"
              VIOLATIONS=$((VIOLATIONS + 1))
            fi
          fi
        done

        # Report results
        if [[ $VIOLATIONS -eq 0 ]]; then
          echo "‚úÖ Root directory structure is clean and compliant!"
          echo ""
          echo "üìä Current root structure:"
          ls -la | grep -E "^(d|-)" | awk '{print "   " $9}' | grep -v "^\.$" | grep -v "^\.\.$$"
        else
          echo ""
          echo "‚ùå Found $VIOLATIONS structure violations!"
          echo ""
          echo "üìã Clean root directory policy:"
          echo "   ‚Ä¢ Documentation: README.md, CHANGELOG.md, CONTRIBUTING.md, etc."
          echo "   ‚Ä¢ Configuration: pyproject.toml, .gitignore, .pre-commit-config.yaml"
          echo "   ‚Ä¢ Source directories: src/, tests/, docs/, examples/, demos/"
          echo "   ‚Ä¢ NO: Planning docs, build artifacts, temp files, AI-generated files"
          echo ""
          echo "üõ†Ô∏è  To fix violations:"
          echo "   1. Move files to appropriate directories (see suggestions above)"
          echo "   2. Add build artifacts to .gitignore"
          echo "   3. Archive internal documentation to archive/internal-docs/"
          echo ""
          exit 1
        fi

  validate-gitignore-protection:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Validate .gitignore protections
      run: |
        echo "üõ°Ô∏è Validating .gitignore protection patterns..."

        # Required protection patterns
        REQUIRED_PATTERNS=(
          "archive/"
          "src/adri/_version.py"
          "*_plan.md"
          "*_implementation*.md"
          "*.DS_Store"
          "*.swp"
          "bandit-report.json"
          "coverage.xml"
          "dist/"
          "build/"
          "*.egg-info/"
        )

        MISSING_PATTERNS=()

        for pattern in "${REQUIRED_PATTERNS[@]}"; do
          if ! grep -q "^$pattern" .gitignore; then
            MISSING_PATTERNS+=("$pattern")
          fi
        done

        if [[ ${#MISSING_PATTERNS[@]} -eq 0 ]]; then
          echo "‚úÖ All required protection patterns are present in .gitignore"
        else
          echo "‚ùå Missing required .gitignore patterns:"
          for pattern in "${MISSING_PATTERNS[@]}"; do
            echo "   - $pattern"
          done
          echo ""
          echo "These patterns help prevent accidental publication of:"
          echo "   ‚Ä¢ Build artifacts and temporary files"
          echo "   ‚Ä¢ AI-generated planning documents"
          echo "   ‚Ä¢ System files and caches"
          echo "   ‚Ä¢ Internal development artifacts"
          exit 1
        fi
