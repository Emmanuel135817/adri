name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety semgrep pip-audit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .

    - name: Run Bandit Security Scan
      run: |
        echo "üîí Running Bandit security scan..."
        bandit -r adri/ -f json -o bandit-report.json || true
        bandit -r adri/ -f txt
      continue-on-error: true

    - name: Run Safety Check
      run: |
        echo "üõ°Ô∏è Running Safety vulnerability check..."
        safety check --json --output safety-report.json || true
        safety check
      continue-on-error: true

    - name: Run pip-audit
      run: |
        echo "üîç Running pip-audit for package vulnerabilities..."
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit
      continue-on-error: true

    - name: Run Semgrep Security Analysis
      run: |
        echo "üî¨ Running Semgrep security analysis..."
        semgrep --config=auto --json --output=semgrep-report.json adri/ || true
        semgrep --config=auto adri/
      continue-on-error: true

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
          semgrep-report.json

    - name: Security Summary
      if: always()
      run: |
        echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Bandit Results" >> $GITHUB_STEP_SUMMARY
        if [ -f bandit-report.json ]; then
          BANDIT_ISSUES=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
          echo "- Issues found: $BANDIT_ISSUES" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Scan completed successfully" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Safety Results" >> $GITHUB_STEP_SUMMARY
        if [ -f safety-report.json ]; then
          SAFETY_VULNS=$(jq '. | length' safety-report.json 2>/dev/null || echo "0")
          echo "- Vulnerabilities found: $SAFETY_VULNS" >> $GITHUB_STEP_SUMMARY
        else
          echo "- No known vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### pip-audit Results" >> $GITHUB_STEP_SUMMARY
        if [ -f pip-audit-report.json ]; then
          PIP_AUDIT_VULNS=$(jq '.vulnerabilities | length' pip-audit-report.json 2>/dev/null || echo "0")
          echo "- Package vulnerabilities: $PIP_AUDIT_VULNS" >> $GITHUB_STEP_SUMMARY
        else
          echo "- No package vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Semgrep Results" >> $GITHUB_STEP_SUMMARY
        if [ -f semgrep-report.json ]; then
          SEMGREP_FINDINGS=$(jq '.results | length' semgrep-report.json 2>/dev/null || echo "0")
          echo "- Security findings: $SEMGREP_FINDINGS" >> $GITHUB_STEP_SUMMARY
        else
          echo "- No security patterns detected" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Fail on Critical Security Issues
      run: |
        # Check for high-severity issues and fail the build if found
        CRITICAL_ISSUES=0
        
        if [ -f bandit-report.json ]; then
          HIGH_SEVERITY=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-report.json 2>/dev/null || echo "0")
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + HIGH_SEVERITY))
        fi
        
        if [ -f safety-report.json ]; then
          SAFETY_CRITICAL=$(jq '. | length' safety-report.json 2>/dev/null || echo "0")
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + SAFETY_CRITICAL))
        fi
        
        if [ $CRITICAL_ISSUES -gt 0 ]; then
          echo "‚ùå Critical security issues found: $CRITICAL_ISSUES"
          echo "Please review and fix security issues before merging."
          exit 1
        else
          echo "‚úÖ No critical security issues found"
        fi
